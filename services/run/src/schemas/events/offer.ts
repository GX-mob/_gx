import location, { Location } from "../common/location";
import rideTypes, { RideTypes } from "../common/ride-types";
import { Type as Ride } from "../common/ride";
// import { Ride } from "@gx-mob/types"

/**
 * Position event schema
 */
export type OfferRequest = {
  /**
   * The route generated by user client and sent to ride service,
   * to calculate the ride price, avoiding mal intent price changing
   * and applying, if exist, any user payment pendency.
   */
  rideID: string;
};

export type OfferServer = {
  /**
   * Ride data
   */
  ride: Ride;
  /**
   * Requester socket id
   */
  requesterSocketId: string;
  /**
   * To improve performance of the riders iteration.
   *
   * Drivers that are too distante, not eligible, that hit the
   * response timeout or refuse the offer are added to this list
   * and skipped in the next iteration.
   */
  ignoreds: string[];
  /**
   * Timeout to rider response the offer
   */
  offerResponseTimeout: NodeJS.Timeout | null;
  /**
   * Send buffer, encoded offer object
   *
   * Perfomance improvement, to don't encode the object in each event emission
   */
  //sendBuff: Buffer;
  /**
   * Offered
   *
   * Current offered driver
   */
  offeredTo: string | null;
  /**
   * Used to increase the distance ratio of match algorithm
   */
  trys: number;
};

export const schema = {
  riderPID: "string",
};

export default {
  id: 1,
  schema,
};
